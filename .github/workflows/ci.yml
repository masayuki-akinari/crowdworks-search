name: CI/CD Pipeline

# GitHub Actions„ÅÆÊ®©ÈôêË®≠ÂÆö
permissions:
  contents: read
  security-events: write
  id-token: write # OIDCË™çË®ºÁî®

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # ÊâãÂãïÂÆüË°å„ÇíË®±ÂèØ

env:
  NODE_VERSION: '18'
  AWS_REGION: 'ap-northeast-1'

jobs:
  # „Ç≥„Éº„ÉâÂìÅË≥™„ÉÅ„Çß„ÉÉ„ÇØÔºàÊúÄÈÄüÂÆüË°åÔºâ
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint check
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: TypeScript type check
        run: npm run type-check

  # Âçò‰Ωì„ÉÜ„Çπ„Éà
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  # „Éì„É´„Éâ„ÉÜ„Çπ„Éà
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Verify build output
        run: |
          echo "=== Checking build output ==="
          if [ ! -d "dist" ]; then
            echo "‚ùå Build failed: dist directory not found"
            exit 1
          fi
          
          # „É°„Ç§„É≥„Éï„Ç°„Ç§„É´„ÅÆÂ≠òÂú®Á¢∫Ë™ç
          main_files=("dist/index.js" "dist/lambda/handler.js")
          for file in "${main_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found: $file"
            else
              echo "‚ö†Ô∏è  Not found: $file"
            fi
          done
          
          echo "Contents of dist directory:"
          find dist -name "*.js" -type f | head -10
          echo "‚úÖ Build verification completed"

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # CDKÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØ
  cdk-synth:
    name: CDK Synth Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build-test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: CDK Synth (dry-run)
        run: npm run cdk:synth
        env:
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}

  # „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Çπ„Ç≠„É£„É≥
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: build-test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t crowdworks-searcher:test .
          echo "‚úÖ Docker build completed successfully"

      - name: Test Docker container
        run: |
          docker run --rm crowdworks-searcher:test node --version
          echo "‚úÖ Docker container test passed"

  # StagingÁí∞Â¢É„Éá„Éó„É≠„Ç§Ôºàdevelop„Éñ„É©„É≥„ÉÅÔºâ
  # Ê≥®ÊÑè: AWSË™çË®ºÊÉÖÂ†±„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„ÅôÔºÅ
  # GitHub„É™„Éù„Ç∏„Éà„É™„ÅÆ Settings > Secrets and variables > Actions „Åß‰ª•‰∏ã„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
  # - STAGING_AWS_ACCESS_KEY_ID
  # - STAGING_AWS_SECRET_ACCESS_KEY
  # - STAGING_OPENAI_API_KEY
  # - STAGING_CROWDWORKS_EMAIL
  # - STAGING_CROWDWORKS_PASSWORD
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, build-test, cdk-synth, docker-build]
    # AWSË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Çã„Åæ„Åß‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñ
    if: false # github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to staging
        run: |
          npm run cdk:deploy -- --context stage=staging --require-approval never
        env:
          STAGE: staging
          OPENAI_API_KEY: ${{ secrets.STAGING_OPENAI_API_KEY }}
          CROWDWORKS_EMAIL: ${{ secrets.STAGING_CROWDWORKS_EMAIL }}
          CROWDWORKS_PASSWORD: ${{ secrets.STAGING_CROWDWORKS_PASSWORD }}

      - name: Post-deployment smoke test
        run: |
          echo "üß™ Running staging smoke tests..."
          # Âü∫Êú¨ÁöÑ„Å™AWS„É™„ÇΩ„Éº„ÇπÂ≠òÂú®Á¢∫Ë™ç
          aws lambda list-functions --query 'Functions[?contains(FunctionName, `CrowdWorks`)]' --output table
          echo "‚úÖ Staging deployment verification completed"

  # ProductionÁí∞Â¢É„Éá„Éó„É≠„Ç§Ôºàmain„Éñ„É©„É≥„ÉÅ + „Çø„Ç∞Ôºâ
  # Ê≥®ÊÑè: AWSË™çË®ºÊÉÖÂ†±„ÅÆË®≠ÂÆö„ÅåÂøÖË¶Å„Åß„ÅôÔºÅ
  # GitHub„É™„Éù„Ç∏„Éà„É™„ÅÆ Settings > Secrets and variables > Actions „Åß‰ª•‰∏ã„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
  # - PRODUCTION_AWS_ACCESS_KEY_ID
  # - PRODUCTION_AWS_SECRET_ACCESS_KEY
  # - PRODUCTION_OPENAI_API_KEY
  # - PRODUCTION_CROWDWORKS_EMAIL
  # - PRODUCTION_CROWDWORKS_PASSWORD
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, build-test, cdk-synth, security-scan]
    # AWSË™çË®ºÊÉÖÂ†±„ÅåË®≠ÂÆö„Åï„Çå„Çã„Åæ„Åß‰∏ÄÊôÇÁöÑ„Å´ÁÑ°ÂäπÂåñ
    if: false # github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Deploy to production
        run: |
          npm run cdk:deploy -- --context stage=production --require-approval never
        env:
          STAGE: production
          OPENAI_API_KEY: ${{ secrets.PRODUCTION_OPENAI_API_KEY }}
          CROWDWORKS_EMAIL: ${{ secrets.PRODUCTION_CROWDWORKS_EMAIL }}
          CROWDWORKS_PASSWORD: ${{ secrets.PRODUCTION_CROWDWORKS_PASSWORD }}

      - name: Post-deployment verification
        run: |
          echo "üöÄ Production deployment completed"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          
          # Âü∫Êú¨ÁöÑ„Å™„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          aws lambda list-functions --query 'Functions[?contains(FunctionName, `CrowdWorks`)]' --output table
          echo "‚úÖ Production deployment verification completed"

  # ÈÄöÁü•ÔºàÂ§±ÊïóÊôÇ„ÅÆ„ÅøÔºâ
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, build-test, cdk-synth, security-scan]
    if: failure()
    
    steps:
      - name: Notify failure
        run: |
          echo "‚ùå CI/CD Pipeline failed"
          echo "Workflow: ${{ github.workflow }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
          echo "Event: ${{ github.event_name }}"
          # TODO: Slack/DiscordÈÄöÁü•„ÇíÂÆüË£Ö 