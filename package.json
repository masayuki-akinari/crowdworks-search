{
    "name": "crowdworks-search",
    "version": "1.0.0",
    "description": "クラウドワークス案件自動検索・評価システム",
    "main": "dist/index.js",
    "scripts": {
        "build": "tsc",
        "build:watch": "tsc --watch",
        "clean": "rimraf dist",
        "lint": "eslint src/**/*.ts",
        "lint:fix": "eslint src/**/*.ts --fix",
        "format": "prettier --write src/**/*.ts",
        "format:check": "prettier --check src/**/*.ts",
        "type-check": "tsc --noEmit",
        "test:category": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testCrowdWorksCategories().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "test:basic": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testPlaywrightBasic().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "test:debug": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.debugBrowserLifecycle().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "test:debug-category": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.debugCategoryScrapingTest().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "test:file-output": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.debugCategoryScrapingWithFileOutput({categories: ['ec', 'web_products'], maxJobsPerCategory: 5, saveToFile: true}).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "test:full": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.loginAndScrapeCategories({categories: ['ec', 'web_products'], maxJobsPerCategory: 10, maxDetailsPerCategory: 3, saveToFile: true}).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "test:no-login": "ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testCategoryScrapingWithoutLogin({categories: ['ec', 'web_products'], maxJobsPerCategory: 10, saveToFile: true}).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "cdk:synth": "cdk synth",
        "cdk:deploy": "cdk deploy",
        "cdk:deploy:container": "npm run build && cdk deploy --require-approval never --context useContainerImage=true",
        "cdk:deploy:staging": "npm run build && cdk deploy --require-approval never --context stage=staging --context useContainerImage=true",
        "cdk:deploy:production": "npm run build && cdk deploy --require-approval never --context stage=production --context useContainerImage=true",
        "cdk:destroy": "cdk destroy",
        "cdk:diff": "cdk diff",
        "dev": "ts-node src/index.ts",
        "start": "node dist/index.js",
        "prepare": "husky install",
        "docker:build": "docker build -t crowdworks-search .",
        "docker:build:lambda": "docker build -f Dockerfile.lambda -t crowdworks-search-lambda .",
        "docker:run": "docker run --rm -it crowdworks-search",
        "docker:run:lambda": "docker run --rm -p 9000:8080 crowdworks-search-lambda",
        "docker:test:lambda": "docker run --rm crowdworks-lambda && echo 'Lambda Container Test Completed'",
        "docker:dev": "docker-compose up --build",
        "lambda:test": "curl -XPOST 'http://localhost:9000/2015-03-31/functions/function/invocations' -d '{\"source\":\"test\",\"detail\":{}}'",
        "lambda:local": "npm run docker:build:lambda && npm run docker:run:lambda",
        "precommit": "lint-staged",
        "security:audit": "npm audit --audit-level=moderate",
        "scrape:default": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.scrapeCrowdWorksJobsByCategoryWithDetails({category: 'ec', maxJobs: 50, maxDetails: 50}).then(r => console.log('✅ デフォルト取得完了:', r.jobs.length, '件一覧,', r.jobDetails.length, '件詳細')))\"",
        "scrape:both-default": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(async m => { const ecResult = await m.scrapeCrowdWorksJobsByCategoryWithDetails({category: 'ec', maxJobs: 50, maxDetails: 50}); console.log('EC:', ecResult.jobs.length, '件一覧,', ecResult.jobDetails.length, '件詳細'); const webResult = await m.scrapeCrowdWorksJobsByCategoryWithDetails({category: 'web_products', maxJobs: 50, maxDetails: 50}); console.log('Web:', webResult.jobs.length, '件一覧,', webResult.jobDetails.length, '件詳細'); console.log('✅ 両カテゴリ取得完了 合計:', ecResult.jobs.length + webResult.jobs.length, '件一覧,', ecResult.jobDetails.length + webResult.jobDetails.length, '件詳細'); })\"",
        "analyze:ec": "npx ts-node scripts/analyze-details.ts details-ec.json analyzed-ec.json",
        "analyze:web": "npx ts-node scripts/analyze-details.ts details-web_products.json analyzed-web_products.json",
        "sort:high": "npx ts-node scripts/sort-by-hourly-rate.ts high",
        "sort:low": "npx ts-node scripts/sort-by-hourly-rate.ts low",
        "sort:default": "npx ts-node scripts/sort-by-hourly-rate.ts",
        "extract:high-hourly": "npx ts-node scripts/extract-high-hourly-jobs.ts",
        "recommend": "npx ts-node scripts/calculate-recommendation-score.ts",
        "handler:test-playwright": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testPlaywrightBasic().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:test-login": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testCrowdWorksLogin().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:test-scraping": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testCrowdWorksScraping().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:test-categories": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testCrowdWorksCategories().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:debug-browser": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.debugBrowserLifecycle().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:debug-category": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.debugCategoryScrapingTest().then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:scrape-ec": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.scrapeCrowdWorksJobsByCategoryWithDetails({category: 'ec', maxJobs: 50, maxDetails: 50}).then(r => console.log('✅ EC取得完了:', r.jobs.length, '件一覧,', r.jobDetails.length, '件詳細')))\"",
        "handler:scrape-web": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.scrapeCrowdWorksJobsByCategoryWithDetails({category: 'web_products', maxJobs: 50, maxDetails: 50}).then(r => console.log('✅ Web製品取得完了:', r.jobs.length, '件一覧,', r.jobDetails.length, '件詳細')))\"",
        "handler:scrape-design": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.scrapeCrowdWorksJobsByCategoryWithDetails({category: 'design', maxJobs: 50, maxDetails: 50}).then(r => console.log('✅ デザイン取得完了:', r.jobs.length, '件一覧,', r.jobDetails.length, '件詳細')))\"",
        "handler:scrape-all": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(async m => { const categories = ['ec', 'web_products', 'design', 'writing', 'translation', 'marketing', 'system_development', 'app_development']; let totalJobs = 0; let totalDetails = 0; for (const category of categories) { try { const result = await m.scrapeCrowdWorksJobsByCategoryWithDetails({category, maxJobs: 50, maxDetails: 50}); console.log(`✅ ${category}: ${result.jobs.length}件一覧, ${result.jobDetails.length}件詳細`); totalJobs += result.jobs.length; totalDetails += result.jobDetails.length; } catch (e) { console.log(`❌ ${category}: エラー`, e.message); } } console.log(`✅ 全カテゴリ完了 - 合計: ${totalJobs}件一覧, ${totalDetails}件詳細`); })\"",
        "handler:login-and-scrape": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.loginAndScrapeCategories({categories: ['ec', 'web_products'], maxJobsPerCategory: 50, maxDetailsPerCategory: 50, saveToFile: true}).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:no-login-scrape": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.testCategoryScrapingWithoutLogin({categories: ['ec', 'web_products'], maxJobsPerCategory: 50, saveToFile: true}).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:file-output": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.debugCategoryScrapingWithFileOutput({categories: ['ec', 'web_products'], maxJobsPerCategory: 50, saveToFile: true}).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler:lambda": "npx ts-node -r dotenv/config -e \"import('./src/lambda/handler').then(m => m.lambdaHandler({source: 'manual', 'detail-type': 'test', detail: {}}, {} as any).then(r => console.log(JSON.stringify(r, null, 2))))\"",
        "handler": "npx ts-node -r dotenv/config src/lambda/handler.ts",
        "h": "npm run handler",
        "handler:help": "npm run handler --"
    },
    "keywords": [
        "crowdworks",
        "automation",
        "scraping",
        "aws",
        "serverless",
        "typescript"
    ],
    "author": "Your Name",
    "license": "MIT",
    "private": true,
    "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
    },
    "dependencies": {
        "@aws-sdk/client-lambda": "^3.450.0",
        "@aws-sdk/client-s3": "^3.450.0",
        "@aws-sdk/client-sns": "^3.450.0",
        "@aws-sdk/client-ssm": "^3.540.0",
        "aws-cdk-lib": "^2.156.0",
        "aws-lambda": "^1.0.7",
        "aws-sdk": "^2.1691.0",
        "constructs": "^10.3.0",
        "dotenv": "^16.5.0",
        "openai": "^4.50.0",
        "playwright": "^1.48.2",
        "source-map-support": "^0.5.21",
        "typescript": "^5.6.3",
        "zod": "^3.22.0"
    },
    "devDependencies": {
        "@types/aws-lambda": "^8.10.145",
        "@types/jest": "^29.5.14",
        "@types/node": "^22.9.1",
        "@typescript-eslint/eslint-plugin": "^8.14.0",
        "@typescript-eslint/parser": "^8.14.0",
        "aws-cdk": "^2.170.0",
        "cross-env": "^7.0.3",
        "esbuild": "^0.24.0",
        "eslint": "^9.14.0",
        "eslint-config-prettier": "^9.1.0",
        "eslint-plugin-prettier": "^5.2.1",
        "husky": "^8.0.0",
        "jest": "^29.7.0",
        "lint-staged": "^15.0.0",
        "nock": "^13.3.0",
        "nodemon": "^3.1.7",
        "prettier": "^3.3.3",
        "ts-jest": "^29.2.5",
        "ts-node": "^10.9.2",
        "tsconfig-paths": "^4.2.0"
    },
    "husky": {
        "hooks": {
            "pre-commit": "lint-staged",
            "pre-push": "npm run type-check && npm run test"
        }
    },
    "lint-staged": {
        "src/**/*.{ts,tsx}": [
            "eslint --fix",
            "prettier --write",
            "git add"
        ]
    }
}