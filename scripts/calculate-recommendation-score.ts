require('dotenv').config();

import { readFileSync, writeFileSync } from 'fs';
import { OpenAI } from 'openai';

// ÂûãÂÆöÁæ©
interface AnalysisResult {
    jobId: string;
    title: string;
    Â∑•Êï∞_Ë¶ãÁ©ç„ÇÇ„Çä: string;
    ÊÉ≥ÂÆöÊôÇÁµ¶: string;
    Èõ£ÊòìÂ∫¶: string;
    gpt_summary: string;
    category?: string;
}

interface ScoredJob extends AnalysisResult {
    hourly_rate_numeric: number;
    workload_hours: number;
    difficulty_score: number;
    skill_fit_score: number;
    recommendation_score: number;
    link: string;
    original_title?: string;
    proposal_greeting?: string;
    specification_questions?: string;
    skill_analysis?: string;
    proposal_amount?: number; // ÊèêÊ°àÈáëÈ°ç
    estimated_finish_date?: string; // ÂÆå‰∫Ü‰∫àÂÆöÊó•ÔºàISOÊñáÂ≠óÂàóÔºâ
}

// .env„Åã„ÇâAPI„Ç≠„ÉºÂèñÂæó
const apiKey = process.env['OPENAI_API_KEY'];
if (!apiKey) {
    console.error('‚ùå OPENAI_API_KEY„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    process.exit(1);
}

const openai = new OpenAI({ apiKey });

// ÊôÇÁµ¶ÊñáÂ≠óÂàó„ÇíÊï∞ÂÄ§„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
function parseHourlyRate(hourlyRateString: string): number {
    if (!hourlyRateString || hourlyRateString.trim() === '' || hourlyRateString === '0ÂÜÜ') {
        return 0;
    }

    const match = hourlyRateString.match(/([0-9,]+)/);
    if (match && match[1]) {
        const numericString = match[1].replace(/,/g, '');
        return parseInt(numericString, 10);
    }

    return 0;
}

// Â∑•Êï∞ÊñáÂ≠óÂàó„ÇíÊï∞ÂÄ§ÔºàÊôÇÈñìÔºâ„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
function parseWorkloadHours(workloadString: string): number {
    if (!workloadString || workloadString.trim() === '') {
        return 40; // „Éá„Éï„Ç©„É´„ÉàÂÄ§
    }

    // „Äå120ÊôÇÈñì„Äç„Äå2ÈÄ±Èñì„Äç„Äå1„É∂Êúà„Äç„Å™„Å©„ÇíËß£Êûê
    const hourMatch = workloadString.match(/([0-9,]+)\s*ÊôÇÈñì/);
    if (hourMatch && hourMatch[1]) {
        return parseInt(hourMatch[1].replace(/,/g, ''), 10);
    }

    const dayMatch = workloadString.match(/([0-9,]+)\s*Êó•/);
    if (dayMatch && dayMatch[1]) {
        return parseInt(dayMatch[1].replace(/,/g, ''), 10) * 8; // 1Êó•8ÊôÇÈñìÊÉ≥ÂÆö
    }

    const weekMatch = workloadString.match(/([0-9,]+)\s*ÈÄ±Èñì/);
    if (weekMatch && weekMatch[1]) {
        return parseInt(weekMatch[1].replace(/,/g, ''), 10) * 40; // 1ÈÄ±Èñì40ÊôÇÈñìÊÉ≥ÂÆö
    }

    const monthMatch = workloadString.match(/([0-9,]+)\s*„É∂?Êúà/);
    if (monthMatch && monthMatch[1]) {
        return parseInt(monthMatch[1].replace(/,/g, ''), 10) * 160; // 1„É∂Êúà160ÊôÇÈñìÊÉ≥ÂÆö
    }

    return 40; // „Éá„Éï„Ç©„É´„ÉàÂÄ§
}

// Èõ£ÊòìÂ∫¶„ÇíÁÇπÊï∞„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞ÔºàÁ∞°Âçò„Åª„Å©È´òÂæóÁÇπÔºâ
function parseDifficultyScore(difficultyString: string): number {
    const difficulty = difficultyString.trim().toLowerCase();

    if (difficulty.includes('Á∞°Âçò') || difficulty.includes('„Åã„Çì„Åü„Çì')) {
        return 10; // Á∞°Âçò = È´òÂæóÁÇπ
    } else if (difficulty.includes('ÊôÆÈÄö') || difficulty.includes('„Åµ„Å§„ÅÜ') || difficulty.includes('Ê®ôÊ∫ñ')) {
        return 6; // ÊôÆÈÄö = ‰∏≠ÂæóÁÇπ
    } else if (difficulty.includes('Èõ£„Åó„ÅÑ') || difficulty.includes('„ÇÄ„Åö„Åã„Åó„ÅÑ') || difficulty.includes('Âõ∞Èõ£')) {
        return 3; // Èõ£„Åó„ÅÑ = ‰ΩéÂæóÁÇπ
    }

    return 5; // ‰∏çÊòé„Å™Â†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà
}

// Ë©ï‰æ°‰øÇÊï∞„ÅÆÂÆöÊï∞
const EVALUATION_COEFFICIENTS = {
    HOURLY: 2.0,        // ÊôÇÁµ¶„ÅÆÈáç„Åø
    WORKLOAD: 1.0,      // Â∑•Êï∞„ÅÆÈáç„Åø  
    SKILL_FIT: 3.0      // „Çπ„Ç≠„É´ÈÅ©ÊÄß„ÅÆÈáç„Åø
};

// ÊèêÊ°àÊñáÁîüÊàêÂØæË±°„ÅÆÊúÄ‰ΩéÊôÇÁµ¶Âü∫Ê∫ñ
const PROPOSAL_GENERATION_MIN_HOURLY_RATE = 3000; // ÂÜÜ

// „Åä„Åô„Åô„ÇÅÁÇπÊï∞„ÇíË®àÁÆó„Åô„ÇãÈñ¢Êï∞Ôºà„Çπ„Ç≠„É´ÈÅ©ÊÄßËÄÉÊÖÆÁâàÔºâ
function calculateRecommendationScore(
    hourlyRate: number,
    workloadHours: number,
    skillFitScore: number
): number {
    // ÊôÇÁµ¶„Çπ„Ç≥„Ç¢Ôºà0-10ÁÇπÔºâ: ÊôÇÁµ¶„ÅåÈ´ò„ÅÑ„Åª„Å©È´òÂæóÁÇπ
    let hourlyScore = 0;
    if (hourlyRate >= 4000) hourlyScore = 10;
    else if (hourlyRate >= 3500) hourlyScore = 9;
    else if (hourlyRate >= 3000) hourlyScore = 8;
    else if (hourlyRate >= 2500) hourlyScore = 7;
    else if (hourlyRate >= 2000) hourlyScore = 6;
    else if (hourlyRate >= 1500) hourlyScore = 5;
    else if (hourlyRate >= 1000) hourlyScore = 4;
    else if (hourlyRate >= 500) hourlyScore = 3;
    else if (hourlyRate > 0) hourlyScore = 2;
    else hourlyScore = 0;

    // Â∑•Êï∞„Çπ„Ç≥„Ç¢Ôºà0-10ÁÇπÔºâ: ÈÅ©Â∫¶„Å™Â∑•Êï∞Ôºà20-80ÊôÇÈñìÔºâ„ÅåÈ´òÂæóÁÇπ
    let workloadScore = 0;
    if (workloadHours >= 20 && workloadHours <= 80) {
        workloadScore = 10; // ÊúÄÈÅ©ÁØÑÂõ≤
    } else if (workloadHours >= 10 && workloadHours <= 120) {
        workloadScore = 8; // ËâØ„ÅÑÁØÑÂõ≤
    } else if (workloadHours >= 5 && workloadHours <= 160) {
        workloadScore = 6; // Ë®±ÂÆπÁØÑÂõ≤
    } else if (workloadHours > 0 && workloadHours <= 200) {
        workloadScore = 4; // ÂæÆÂ¶ô„Å™ÁØÑÂõ≤
    } else {
        workloadScore = 2; // Ê•µÁ´Ø„Å™Â∑•Êï∞
    }

    // ‰øÇÊï∞„Ç∑„Çπ„ÉÜ„É†„Å´„Çà„ÇãÁ∑èÂêà„Çπ„Ç≥„Ç¢Ë®àÁÆóÔºà„Çπ„Ç≠„É´ÈÅ©ÊÄßÈáçË¶ñÔºâ
    const totalScore = (hourlyScore * EVALUATION_COEFFICIENTS.HOURLY) +
        (workloadScore * EVALUATION_COEFFICIENTS.WORKLOAD) +
        (skillFitScore * EVALUATION_COEFFICIENTS.SKILL_FIT);

    return Math.round(totalScore * 10) / 10; // Â∞èÊï∞ÁÇπ1‰Ωç„Åæ„Åß
}

// Ë©≥Á¥∞„Éá„Éº„Çø„Åã„ÇâÂÖÉ„ÅÆ„Çø„Ç§„Éà„É´„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
function getOriginalJobData(jobId: string, detailsData: any[]): any {
    return detailsData.find(job => job.jobId === jobId);
}

// ‰∏¶ÂàóÂÆüË°åÂà∂Âæ°„ÇØ„É©„Çπ
class ConcurrencyLimiter {
    private runningCount = 0;
    private queue: (() => Promise<void>)[] = [];

    constructor(private maxConcurrency: number) { }

    async execute<T>(task: () => Promise<T>): Promise<T> {
        return new Promise<T>((resolve, reject) => {
            const wrappedTask = async () => {
                try {
                    this.runningCount++;
                    const result = await task();
                    resolve(result);
                } catch (error) {
                    reject(error);
                } finally {
                    this.runningCount--;
                    this.processQueue();
                }
            };

            if (this.runningCount < this.maxConcurrency) {
                wrappedTask();
            } else {
                this.queue.push(wrappedTask);
            }
        });
    }

    private processQueue() {
        if (this.queue.length > 0 && this.runningCount < this.maxConcurrency) {
            const nextTask = this.queue.shift();
            if (nextTask) {
                nextTask();
            }
        }
    }
}

// „É°„Ç§„É≥Âá¶ÁêÜÔºàÈùûÂêåÊúüÁâàÔºâ
async function calculateRecommendationScores(minHourlyRate: number = 3000): Promise<void> {
    console.log('üîÑ „Åä„Åô„Åô„ÇÅÁÇπÊï∞Ë®àÁÆó„ÇíÈñãÂßã...');

    const scoredJobs: ScoredJob[] = [];

    // Ë©≥Á¥∞„Éá„Éº„Çø„ÇÇË™≠„ÅøËæº„ÇÄÔºàÂÖÉ„ÅÆ„Çø„Ç§„Éà„É´ÂèñÂæóÁî®Ôºâ
    let ecDetailsData: any[] = [];
    let webDetailsData: any[] = [];

    // ECË©≥Á¥∞„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
    try {
        ecDetailsData = JSON.parse(readFileSync('output/details-ec.json', 'utf8'));
        console.log(`üìÇ ECË©≥Á¥∞„Éá„Éº„Çø: ${ecDetailsData.length}‰ª∂Ë™≠„ÅøËæº„Åø`);
    } catch (error) {
        console.log(`‚ö†Ô∏è ECË©≥Á¥∞„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó: ${error}`);
    }

    // WebË£ΩÂìÅË©≥Á¥∞„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
    try {
        webDetailsData = JSON.parse(readFileSync('output/details-web_products.json', 'utf8'));
        console.log(`üìÇ WebË£ΩÂìÅË©≥Á¥∞„Éá„Éº„Çø: ${webDetailsData.length}‰ª∂Ë™≠„ÅøËæº„Åø`);
    } catch (error) {
        console.log(`‚ö†Ô∏è WebË£ΩÂìÅË©≥Á¥∞„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó: ${error}`);
    }

    // AIÂàÜÊûêÊ∏à„Åø„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„ÅøÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    let ecAnalyzedData: any[] = [];
    let webAnalyzedData: any[] = [];

    try {
        ecAnalyzedData = JSON.parse(readFileSync('output/analyzed-ec.json', 'utf8'));
        console.log(`üß† EC AIÂàÜÊûê„Éá„Éº„Çø: ${ecAnalyzedData.length}‰ª∂Ë™≠„ÅøËæº„Åø`);
    } catch (error) {
        console.log(`‚ö†Ô∏è EC„Ç´„ÉÜ„Ç¥„É™„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: analyzed-ec.json`);
    }

    try {
        webAnalyzedData = JSON.parse(readFileSync('output/analyzed-web_products.json', 'utf8'));
        console.log(`üß† WebË£ΩÂìÅ AIÂàÜÊûê„Éá„Éº„Çø: ${webAnalyzedData.length}‰ª∂Ë™≠„ÅøËæº„Åø`);
    } catch (error) {
        console.log(`‚ö†Ô∏è WebË£ΩÂìÅ„Ç´„ÉÜ„Ç¥„É™„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: analyzed-web_products.json`);
    }

    // EC„Ç´„ÉÜ„Ç¥„É™„ÅÆÂàÜÊûê„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
    try {
        ecAnalyzedData.forEach(item => {
            const hourlyRate = parseHourlyRate(item.ÊÉ≥ÂÆöÊôÇÁµ¶);
            const workloadHours = parseWorkloadHours(item.Â∑•Êï∞_Ë¶ãÁ©ç„ÇÇ„Çä);
            const difficultyScore = parseDifficultyScore(item.Èõ£ÊòìÂ∫¶);
            const skillFitScore = 5; // ‰ªÆ„ÅÆ„Çπ„Ç≠„É´ÈÅ©ÊÄß„Çπ„Ç≥„Ç¢ÔºàÂæå„ÅßÊõ¥Êñ∞Ôºâ
            const recommendationScore = calculateRecommendationScore(hourlyRate, workloadHours, skillFitScore);

            const originalJob = getOriginalJobData(item.jobId, ecDetailsData);

            const proposalAmount = Math.round(workloadHours * minHourlyRate);
            const finishDays = Math.ceil((workloadHours / 6) * 2);
            const finishDate = new Date();
            finishDate.setDate(finishDate.getDate() + finishDays);
            const estimatedFinishDate = finishDate.toISOString().split('T')[0];

            scoredJobs.push({
                ...item,
                category: 'EC',
                hourly_rate_numeric: hourlyRate,
                workload_hours: workloadHours,
                difficulty_score: difficultyScore,
                skill_fit_score: skillFitScore,
                recommendation_score: recommendationScore,
                link: `https://crowdworks.jp/public/jobs/${item.jobId}`,
                original_title: originalJob?.title || item.title,
                proposal_amount: proposalAmount,
                estimated_finish_date: estimatedFinishDate
            });
        });
        console.log(`‚úÖ EC„Ç´„ÉÜ„Ç¥„É™: ${ecAnalyzedData.length}‰ª∂Âá¶ÁêÜÂÆå‰∫Ü`);
    } catch (e) {
        console.log('‚ö†Ô∏è EC„Ç´„ÉÜ„Ç¥„É™„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: analyzed-ec.json');
    }

    // WebË£ΩÂìÅ„Ç´„ÉÜ„Ç¥„É™„ÅÆÂàÜÊûê„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
    try {
        webAnalyzedData.forEach(item => {
            const hourlyRate = parseHourlyRate(item.ÊÉ≥ÂÆöÊôÇÁµ¶);
            const workloadHours = parseWorkloadHours(item.Â∑•Êï∞_Ë¶ãÁ©ç„ÇÇ„Çä);
            const difficultyScore = parseDifficultyScore(item.Èõ£ÊòìÂ∫¶);
            const skillFitScore = 5; // ‰ªÆ„ÅÆ„Çπ„Ç≠„É´ÈÅ©ÊÄß„Çπ„Ç≥„Ç¢ÔºàÂæå„ÅßÊõ¥Êñ∞Ôºâ
            const recommendationScore = calculateRecommendationScore(hourlyRate, workloadHours, skillFitScore);

            const originalJob = getOriginalJobData(item.jobId, webDetailsData);

            const proposalAmount = Math.round(workloadHours * minHourlyRate);
            const finishDays = Math.ceil((workloadHours / 6) * 2);
            const finishDate = new Date();
            finishDate.setDate(finishDate.getDate() + finishDays);
            const estimatedFinishDate = finishDate.toISOString().split('T')[0];

            scoredJobs.push({
                ...item,
                category: 'WebË£ΩÂìÅ',
                hourly_rate_numeric: hourlyRate,
                workload_hours: workloadHours,
                difficulty_score: difficultyScore,
                skill_fit_score: skillFitScore,
                recommendation_score: recommendationScore,
                link: `https://crowdworks.jp/public/jobs/${item.jobId}`,
                original_title: originalJob?.title || item.title,
                proposal_amount: proposalAmount,
                estimated_finish_date: estimatedFinishDate
            });
        });
        console.log(`‚úÖ WebË£ΩÂìÅ„Ç´„ÉÜ„Ç¥„É™: ${webAnalyzedData.length}‰ª∂Âá¶ÁêÜÂÆå‰∫Ü`);
    } catch (e) {
        console.log('‚ö†Ô∏è WebË£ΩÂìÅ„Ç´„ÉÜ„Ç¥„É™„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: analyzed-web_products.json');
    }

    if (scoredJobs.length === 0) {
        console.error('‚ùå „Éá„Éº„Çø„ÅåË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì„Åß„Åó„Åü');
        return;
    }

    // ÂÖ®Ê°à‰ª∂„ÅÆ„Çπ„Ç≠„É´ÈÅ©ÊÄßË©ï‰æ°„ÇíÂÆüË°å
    console.log(`\nüß† ÂÖ®Ê°à‰ª∂„ÅÆ„Çπ„Ç≠„É´ÈÅ©ÊÄßË©ï‰æ°‰∏≠ÔºàÊúÄÂ§ß5‰ª∂‰∏¶ÂàóÔºâ...`);

    const limiter = new ConcurrencyLimiter(5);
    let skillAnalysisCount = 0;

    const skillAnalysisPromises = scoredJobs.map(async (job, index) => {
        try {
            const allDetailsData = [...ecDetailsData, ...webDetailsData];
            const originalJob = getOriginalJobData(job.jobId, allDetailsData);

            const { score, analysis } = await limiter.execute(() =>
                analyzeSkillFit(job, originalJob)
            );

            job.skill_fit_score = score;
            job.skill_analysis = analysis;

            // „Çπ„Ç≠„É´ÈÅ©ÊÄß„Çπ„Ç≥„Ç¢„Åß„Åä„Åô„Åô„ÇÅÁÇπÊï∞„ÇíÂÜçË®àÁÆó
            job.recommendation_score = calculateRecommendationScore(
                job.hourly_rate_numeric,
                job.workload_hours,
                score
            );

            skillAnalysisCount++;
            console.log(`‚úÖ [${skillAnalysisCount}/${scoredJobs.length}] ${job.original_title?.substring(0, 40)}... „Çπ„Ç≠„É´ÈÅ©ÊÄßË©ï‰æ°ÂÆå‰∫Ü`);

            return { success: true, index };
        } catch (error) {
            console.error(`‚ùå [${index + 1}/${scoredJobs.length}] „Çπ„Ç≠„É´ÈÅ©ÊÄßË©ï‰æ°„Ç®„É©„Éº:`, error);
            return { success: false, index };
        }
    });

    await Promise.allSettled(skillAnalysisPromises);
    console.log(`üéØ „Çπ„Ç≠„É´ÈÅ©ÊÄßË©ï‰æ°ÂÆå‰∫Ü: ${skillAnalysisCount}/${scoredJobs.length}‰ª∂ÊàêÂäü`);

    // „Åä„Åô„Åô„ÇÅÁÇπÊï∞È†Ü„Åß„ÇΩ„Éº„ÉàÔºàÈ´òÂæóÁÇπÈ†ÜÔºâ
    const sortedJobs = scoredJobs.sort((a, b) => b.recommendation_score - a.recommendation_score);

    // Áµ±Ë®àÊÉÖÂ†±Ë°®Á§∫
    const validJobs = sortedJobs.filter(j => j.hourly_rate_numeric > 0);
    if (validJobs.length > 0) {
        const maxScore = Math.max(...validJobs.map(j => j.recommendation_score));
        const minScore = Math.min(...validJobs.map(j => j.recommendation_score));
        const avgScore = Math.round((validJobs.reduce((sum, j) => sum + j.recommendation_score, 0) / validJobs.length) * 10) / 10;
        const avgSkillFit = Math.round((validJobs.reduce((sum, j) => sum + j.skill_fit_score, 0) / validJobs.length) * 10) / 10;

        console.log(`\nüìà Áµ±Ë®àÊÉÖÂ†±:`);
        console.log(`ÊúÄÈ´ò„Åä„Åô„Åô„ÇÅÁÇπÊï∞: ${maxScore}ÁÇπ`);
        console.log(`ÊúÄ‰Ωé„Åä„Åô„Åô„ÇÅÁÇπÊï∞: ${minScore}ÁÇπ`);
        console.log(`Âπ≥Âùá„Åä„Åô„Åô„ÇÅÁÇπÊï∞: ${avgScore}ÁÇπ`);
        console.log(`Âπ≥Âùá„Çπ„Ç≠„É´ÈÅ©ÊÄß: ${avgSkillFit}ÁÇπ`);
        console.log(`ÊúâÂäπÊ°à‰ª∂: ${validJobs.length}‰ª∂ / ÂÖ®${sortedJobs.length}‰ª∂`);
    }

    // ÊôÇÁµ¶3000ÂÜÜ‰ª•‰∏ä„ÅÆÊ°à‰ª∂„Å´ÊèêÊ°àÊñáÁîüÊàê„ÇíËøΩÂä†
    const highValueJobs = sortedJobs.filter(job => job.hourly_rate_numeric >= PROPOSAL_GENERATION_MIN_HOURLY_RATE);
    console.log(`\nü§ñ ÊôÇÁµ¶${PROPOSAL_GENERATION_MIN_HOURLY_RATE}ÂÜÜ‰ª•‰∏ä„ÅÆÊ°à‰ª∂„ÅÆÊèêÊ°àÊñáÁîüÊàê‰∏≠ÔºàÊúÄÂ§ß3‰ª∂‰∏¶ÂàóÔºâ...`);
    console.log(`ÂØæË±°Ê°à‰ª∂: ${highValueJobs.length}‰ª∂`);

    const proposalLimiter = new ConcurrencyLimiter(3); // ÊèêÊ°àÊñáÁîüÊàê„ÅØ3‰ª∂‰∏¶Âàó
    let proposalCount = 0;

    const proposalPromises = highValueJobs.map(async (job, index) => {
        try {
            const allDetailsData = [...ecDetailsData, ...webDetailsData];
            const originalJob = getOriginalJobData(job.jobId, allDetailsData);

            const { greeting, questions } = await proposalLimiter.execute(() =>
                generateProposalContent(job, originalJob)
            );

            job.proposal_greeting = greeting;
            job.specification_questions = questions;

            proposalCount++;
            console.log(`‚úÖ [${proposalCount}/${highValueJobs.length}] ${job.original_title?.substring(0, 40)}... ÊèêÊ°àÊñáÁîüÊàêÂÆå‰∫Ü`);

            return { success: true, index };
        } catch (error) {
            console.error(`‚ùå [${index + 1}/${highValueJobs.length}] ÊèêÊ°àÊñáÁîüÊàê„Ç®„É©„Éº:`, error);
            return { success: false, index };
        }
    });

    await Promise.allSettled(proposalPromises);
    console.log(`üéØ ÊèêÊ°àÊñáÁîüÊàêÂÆå‰∫Ü: ${proposalCount}/${highValueJobs.length}‰ª∂ÊàêÂäü`);

    // ÁµêÊûúË°®Á§∫Ôºà‰∏ä‰Ωç20‰ª∂Ôºâ
    console.log(`\nüèÜ Web„Ç®„É≥„Ç∏„Éã„Ç¢Âêë„Åë„Åä„Åô„Åô„ÇÅÊ°à‰ª∂„É©„É≥„Ç≠„É≥„Ç∞ TOP20:\n`);

    sortedJobs.slice(0, 20).forEach((job, index) => {
        const rank = index + 1;
        const score = job.recommendation_score;
        const hourlyRate = job.hourly_rate_numeric.toLocaleString() + 'ÂÜÜ';
        const category = job.category || 'N/A';
        const difficulty = job.Èõ£ÊòìÂ∫¶ || 'N/A';
        const workload = job.Â∑•Êï∞_Ë¶ãÁ©ç„ÇÇ„Çä || 'N/A';
        const skillFit = job.skill_fit_score?.toFixed(1) || 'N/A';
        const summary = (job.gpt_summary || '').substring(0, 60) + '...';

        console.log(`${rank}‰Ωç: ${score}ÁÇπ | ${hourlyRate} (${category}) | Èõ£ÊòìÂ∫¶: ${difficulty} | „Çπ„Ç≠„É´ÈÅ©ÊÄß: ${skillFit}ÁÇπ`);
        console.log(`   Â∑•Êï∞: ${workload}`);
        console.log(`   Ê¶ÇË¶Å: ${summary}`);

        if (job.skill_analysis) {
            console.log(`   üß† ÈÅ©ÊÄß: ${job.skill_analysis.substring(0, 80)}...`);
        }

        // ÊôÇÁµ¶3000ÂÜÜ‰ª•‰∏ä„Å™„ÇâÊèêÊ°àÊñá„Å®Ë≥™Âïè„ÇÇËøΩÂä†
        if (job.hourly_rate_numeric >= PROPOSAL_GENERATION_MIN_HOURLY_RATE && job.proposal_greeting && job.specification_questions) {
            console.log(`   üí¨ ÊèêÊ°àÊñá: ${job.proposal_greeting.substring(0, 60)}...`);
        }
        console.log('');
    });

    // ÁµêÊûú„ÇíJSON„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    writeFileSync('output/jobs-with-recommendation-scores.json', JSON.stringify(sortedJobs, null, 2), 'utf8');
    console.log(`üíæ ÁµêÊûú„Çí‰øùÂ≠ò: output/jobs-with-recommendation-scores.json (${sortedJobs.length}‰ª∂)`);

    // Markdown„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò
    const markdown = generateRecommendationMarkdown(sortedJobs.slice(0, 30)); // TOP30
    writeFileSync('output/recommended-jobs-top30.md', markdown, 'utf8');
    console.log(`üìÑ Markdown„Éï„Ç°„Ç§„É´„Çí‰øùÂ≠ò: output/recommended-jobs-top30.md`);
}

// MarkdownÁîüÊàêÈñ¢Êï∞
function generateRecommendationMarkdown(jobs: ScoredJob[]): string {
    const currentDate = new Date().toISOString().split('T')[0];

    let markdown = `# Web„Ç®„É≥„Ç∏„Éã„Ç¢Âêë„Åë„Åä„Åô„Åô„ÇÅÊ°à‰ª∂„É©„É≥„Ç≠„É≥„Ç∞ TOP30\n\n`;
    markdown += `> ÁîüÊàêÊó•: ${currentDate}  \n`;
    markdown += `> Ë©ï‰æ°Âü∫Ê∫ñ: ‰øÇÊï∞„Ç∑„Çπ„ÉÜ„É†ÔºàÊôÇÁµ¶√ó${EVALUATION_COEFFICIENTS.HOURLY} + Â∑•Êï∞√ó${EVALUATION_COEFFICIENTS.WORKLOAD} + „Çπ„Ç≠„É´ÈÅ©ÊÄß√ó${EVALUATION_COEFFICIENTS.SKILL_FIT}Ôºâ  \n`;
    markdown += `> ÂØæË±°ËÄÖ: È´ò„Çπ„Ç≠„É´Web„Ç®„É≥„Ç∏„Éã„Ç¢Ôºà„Éá„Ç∂„Ç§„É≥„Çπ„Ç≠„É´‰Ωé„ÇÅÔºâ  \n`;
    markdown += `> ÊúÄÈ´òÂæóÁÇπ: ${Math.max(...jobs.map(j => j.recommendation_score))}ÁÇπ  \n`;
    markdown += `> ÂØæË±°‰ª∂Êï∞: ${jobs.length}‰ª∂\n`;
    markdown += `> üí¨ ÊôÇÁµ¶${PROPOSAL_GENERATION_MIN_HOURLY_RATE}ÂÜÜ‰ª•‰∏ä„ÅÆÊ°à‰ª∂„Å´„ÅØÊà¶Áï•ÁöÑÊèêÊ°àÊñá„ÉªË≥™Âïè„ÇíÁîüÊàê\n\n`;

    markdown += `## üë®‚Äçüíª ÂØæË±°„Çπ„Ç≠„É´„Éó„É≠„Éï„Ç£„Éº„É´\n\n`;
    markdown += `- **È´ò„Çπ„Ç≠„É´Web„Ç®„É≥„Ç∏„Éã„Ç¢**Ôºà„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éª„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ‰∏°ÊñπÔºâ\n`;
    markdown += `- **ÂæóÊÑèÂàÜÈáé**: „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Éª„Ç∑„Çπ„ÉÜ„É†ÈñãÁô∫„ÉªAPIÈÄ£Êê∫„ÉªDBË®≠Ë®à„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ\n`;
    markdown += `- **Ëã¶ÊâãÂàÜÈáé**: „Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ„Éá„Ç∂„Ç§„É≥„ÉªUI/UX„Éá„Ç∂„Ç§„É≥ÔºàCSS„Çπ„Çø„Ç§„É™„É≥„Ç∞Á®ãÂ∫¶„Å™„ÇâÂØæÂøúÂèØËÉΩÔºâ\n\n`;

    markdown += `## üìä Ë©ï‰æ°Âü∫Ê∫ñ„ÅÆË©≥Á¥∞\n\n`;
    markdown += `### üí∞ ÊôÇÁµ¶„Çπ„Ç≥„Ç¢Ôºà‰øÇÊï∞Ôºö${EVALUATION_COEFFICIENTS.HOURLY}Ôºâ\n`;
    markdown += `- 4000ÂÜÜ‰ª•‰∏ä: 10ÁÇπ ‚Üí ${10 * EVALUATION_COEFFICIENTS.HOURLY}ÁÇπ\n`;
    markdown += `- 3500ÂÜÜ‰ª•‰∏ä: 9ÁÇπ ‚Üí ${9 * EVALUATION_COEFFICIENTS.HOURLY}ÁÇπ\n`;
    markdown += `- 3000ÂÜÜ‰ª•‰∏ä: 8ÁÇπ ‚Üí ${8 * EVALUATION_COEFFICIENTS.HOURLY}ÁÇπ\n`;
    markdown += `- 2500ÂÜÜ‰ª•‰∏ä: 7ÁÇπ ‚Üí ${7 * EVALUATION_COEFFICIENTS.HOURLY}ÁÇπ\n`;
    markdown += `- 2000ÂÜÜ‰ª•‰∏ä: 6ÁÇπ ‚Üí ${6 * EVALUATION_COEFFICIENTS.HOURLY}ÁÇπ\n\n`;

    markdown += `### ‚è∞ Â∑•Êï∞„Çπ„Ç≥„Ç¢Ôºà‰øÇÊï∞Ôºö${EVALUATION_COEFFICIENTS.WORKLOAD}Ôºâ\n`;
    markdown += `- 20-80ÊôÇÈñì: 10ÁÇπ ‚Üí ${10 * EVALUATION_COEFFICIENTS.WORKLOAD}ÁÇπÔºàÊúÄÈÅ©„Å™Â∑•Êï∞Ôºâ\n`;
    markdown += `- 10-120ÊôÇÈñì: 8ÁÇπ ‚Üí ${8 * EVALUATION_COEFFICIENTS.WORKLOAD}ÁÇπÔºàËâØ„ÅÑÁØÑÂõ≤Ôºâ\n`;
    markdown += `- 5-160ÊôÇÈñì: 6ÁÇπ ‚Üí ${6 * EVALUATION_COEFFICIENTS.WORKLOAD}ÁÇπÔºàË®±ÂÆπÁØÑÂõ≤Ôºâ\n\n`;

    markdown += `### üß† „Çπ„Ç≠„É´ÈÅ©ÊÄß„Çπ„Ç≥„Ç¢Ôºà‰øÇÊï∞Ôºö${EVALUATION_COEFFICIENTS.SKILL_FIT}Ôºâ\n`;
    markdown += `- 10ÁÇπ: ÊäÄË°ìÂäõ„ÇíÊúÄÂ§ßÈôêÊ¥ª„Åã„Åõ„ÇãÊ°à‰ª∂Ôºà„Ç∑„Çπ„ÉÜ„É†ÈñãÁô∫„ÄÅAPIÈÄ£Êê∫„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊîπÂñÑÁ≠âÔºâ\n`;
    markdown += `- 8-9ÁÇπ: ÊäÄË°ì„Çπ„Ç≠„É´„ÅåÈáçË¶Å„Å™Ê°à‰ª∂ÔºàWordPress„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„ÄÅECÊ©üËÉΩÈñãÁô∫Á≠âÔºâ\n`;
    markdown += `- 6-7ÁÇπ: ÊäÄË°ì„Å®„Éá„Ç∂„Ç§„É≥„ÅåÂçä„ÄÖÔºàÊó¢Â≠ò„Çµ„Ç§„Éà‰øÆÊ≠£„ÄÅÁ∞°Âçò„Å™„Çπ„Çø„Ç§„É™„É≥„Ç∞Á≠âÔºâ\n`;
    markdown += `- 4-5ÁÇπ: „Éá„Ç∂„Ç§„É≥Ë¶ÅÁ¥†„ÅåÂ§ö„ÅÑÔºà„É¨„Ç§„Ç¢„Ç¶„Éà‰ΩúÊàê„ÄÅ„Éì„Ç∏„É•„Ç¢„É´ÈáçË¶ñÁ≠âÔºâ\n`;
    markdown += `- 1-3ÁÇπ: Á¥îÁ≤ã„Å™„Éá„Ç∂„Ç§„É≥Ê°à‰ª∂Ôºà„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØÂà∂‰Ωú„ÄÅUI/UX„Éá„Ç∂„Ç§„É≥Á≠âÔºâ\n`;
    markdown += `- 0ÁÇπ: ÂÆåÂÖ®„Å´„Çπ„Ç≠„É´Â§ñÔºà„Ç§„É©„Çπ„ÉàÂà∂‰Ωú„ÄÅÂãïÁîªÁ∑®ÈõÜÁ≠âÔºâ\n\n`;

    markdown += `## üîß ‰øÇÊï∞„ÅÆÊÑèÂë≥\n\n`;
    markdown += `- **ÊôÇÁµ¶‰øÇÊï∞ ${EVALUATION_COEFFICIENTS.HOURLY}**: ÂèéÁõäÊÄßÈáçË¶ñ\n`;
    markdown += `- **Â∑•Êï∞‰øÇÊï∞ ${EVALUATION_COEFFICIENTS.WORKLOAD}**: ÈÅ©Â∫¶„Å™‰ΩúÊ•≠Èáè„Çí„Éê„É©„É≥„ÇπË©ï‰æ°\n`;
    markdown += `- **„Çπ„Ç≠„É´ÈÅ©ÊÄß‰øÇÊï∞ ${EVALUATION_COEFFICIENTS.SKILL_FIT}**: „Çπ„Ç≠„É´ÈÅ©ÊÄß„ÇíÊúÄÈáçË¶ñÔºàÊäÄË°ìÊ°à‰ª∂„ÇíÂÑ™ÈÅáÔºâ\n`;
    markdown += `- **Èõ£ÊòìÂ∫¶**: ÂèÇËÄÉÊÉÖÂ†±„Å®„Åó„Å¶Ë°®Á§∫ÔºàÁÇπÊï∞Ë®àÁÆó„Å´„ÅØÂê´„ÇÅ„Å™„ÅÑÔºâ\n\n`;

    const maxScore = (10 * EVALUATION_COEFFICIENTS.HOURLY) + (10 * EVALUATION_COEFFICIENTS.WORKLOAD) + (10 * EVALUATION_COEFFICIENTS.SKILL_FIT);
    markdown += `**ÊúÄÈ´òÁêÜË´ñÂÄ§**: ${10 * EVALUATION_COEFFICIENTS.HOURLY} + ${10 * EVALUATION_COEFFICIENTS.WORKLOAD} + ${10 * EVALUATION_COEFFICIENTS.SKILL_FIT} = ${maxScore}ÁÇπ\n\n`;

    markdown += `## üèÜ „É©„É≥„Ç≠„É≥„Ç∞\n\n`;

    jobs.forEach((job, index) => {
        const rank = index + 1;
        markdown += `### ${rank}‰Ωç: ${job.recommendation_score}ÁÇπ - [${job.original_title}](${job.link})\n\n`;
        markdown += `**üí∞ ÊÉ≥ÂÆöÊôÇÁµ¶:** ${job.hourly_rate_numeric.toLocaleString()}ÂÜÜ  \n`;
        markdown += `**üéØ Èõ£ÊòìÂ∫¶:** ${job.Èõ£ÊòìÂ∫¶}  \n`;
        markdown += `**‚è∞ Ë¶ãÁ©çÂ∑•Êï∞:** ${job.Â∑•Êï∞_Ë¶ãÁ©ç„ÇÇ„Çä}  \n`;
        markdown += `**üß† „Çπ„Ç≠„É´ÈÅ©ÊÄß:** ${job.skill_fit_score?.toFixed(1)}ÁÇπ/10ÁÇπ  \n`;
        markdown += `**üè∑Ô∏è „Ç´„ÉÜ„Ç¥„É™:** ${job.category}  \n`;
        markdown += `**üîó Ê°à‰ª∂URL:** ${job.link}\n\n`;

        markdown += `**üìù ÂàÜÊûêÊ¶ÇË¶Å:**  \n`;
        markdown += `${job.gpt_summary}\n\n`;

        if (job.skill_analysis) {
            markdown += `**üß† „Çπ„Ç≠„É´ÈÅ©ÊÄßÂàÜÊûê:**  \n`;
            markdown += `${job.skill_analysis}\n\n`;
        }

        // ÊôÇÁµ¶3000ÂÜÜ‰ª•‰∏ä„Å™„ÇâÊèêÊ°àÊñá„Å®Ë≥™Âïè„ÇÇËøΩÂä†
        if (job.hourly_rate_numeric >= PROPOSAL_GENERATION_MIN_HOURLY_RATE && job.proposal_greeting && job.specification_questions) {
            markdown += `**üí¨ Êà¶Áï•ÁöÑÊèêÊ°àÊñá:**  \n`;
            markdown += `${job.proposal_greeting}\n\n`;

            markdown += `**‚ùì ‰ªïÊßòÁ¢∫Ë™çË≥™Âïè:**  \n`;
            markdown += `${job.specification_questions}\n\n`;
        }

        markdown += `---\n\n`;
    });

    // 3000ÂÜÜ‰ª•‰∏ä„ÅÆÊ°à‰ª∂„ÇíË°®ÂΩ¢Âºè„ÅßÂá∫Âäõ
    const filtered = jobs.filter(j => j.hourly_rate_numeric >= PROPOSAL_GENERATION_MIN_HOURLY_RATE);
    if (filtered.length > 0) {
        markdown += `\n## üí¥ ${PROPOSAL_GENERATION_MIN_HOURLY_RATE}ÂÜÜ‰ª•‰∏ä„ÅÆÊ°à‰ª∂‰∏ÄË¶ß\n\n`;
        markdown += `| „Çø„Ç§„Éà„É´ | ÊèêÊ°àÈáëÈ°ç | ÂÆå‰∫Ü‰∫àÂÆöÊó• | Á¥π‰ªãÊñá |\n`;
        markdown += `|---|---|---|---|\n`;
        filtered.forEach(job => {
            markdown += `| [${job.original_title}](${job.link}) | ${job.proposal_amount?.toLocaleString()}ÂÜÜ | ${job.estimated_finish_date} | ${(job.proposal_greeting || '').replace(/\n/g, ' ')} |\n`;
        });
        markdown += `\n`;
    }

    return markdown;
}

// GPT„ÅßÊèêÊ°àÁî®Êå®Êã∂Êñá„Å®‰ªïÊßòË≥™Âïè„ÇíÁîüÊàê„Åô„ÇãÈñ¢Êï∞
async function generateProposalContent(job: AnalysisResult, originalJob: any): Promise<{ greeting: string; questions: string }> {
    const prompt = `‰ª•‰∏ã„ÅÆ„ÇØ„É©„Ç¶„Éâ„ÉØ„Éº„ÇØ„ÇπÊ°à‰ª∂„Å´ÂøúÂãü„Åô„ÇãÈöõ„ÅÆÊà¶Áï•ÁöÑ„Å™Êå®Êã∂Êñá„Å®‰ªïÊßòÁ¢∫Ë™çË≥™Âïè„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„ÄêÊ°à‰ª∂ÊÉÖÂ†±„Äë
„Çø„Ç§„Éà„É´: ${job.title}
Ë©≥Á¥∞Ë™¨Êòé: ${originalJob?.detailedDescription || 'Ë©≥Á¥∞‰∏çÊòé'}
ÊÉ≥ÂÆöÊôÇÁµ¶: ${job.ÊÉ≥ÂÆöÊôÇÁµ¶}
Ë¶ãÁ©çÂ∑•Êï∞: ${job.Â∑•Êï∞_Ë¶ãÁ©ç„ÇÇ„Çä}
Èõ£ÊòìÂ∫¶: ${job.Èõ£ÊòìÂ∫¶}

„ÄêË¶ÅÊ±ÇÂÜÖÂÆπ„Äë
1. **Êå®Êã∂Êñá**: „Éó„É≠„Éï„Çß„ÉÉ„Ç∑„Éß„Éä„É´„ÅßË¶™„Åó„Åø„ÇÑ„Åô„ÅÑ„ÄÅÁ∞°ÊΩî„Å™Ëá™Â∑±Á¥π‰ªãÔºà2-3Ë°åÔºâ
2. **‰ªïÊßòÁ¢∫Ë™çË≥™Âïè**: Ê°à‰ª∂„ÇíÁ¢∫ÂÆü„Å´ÊàêÂäü„Åï„Åõ„Çã„Åü„ÇÅ„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Ë≥™ÂïèÔºà3-5ÂÄãÔºâ

„ÄêÊå®Êã∂Êñá„ÅÆ„Éù„Ç§„É≥„Éà„Äë
- ÁµåÈ®ì„Å®Â∞ÇÈñÄÊÄß„Çí„Ç¢„Éî„Éº„É´
- Ê°à‰ª∂„Å∏„ÅÆÁúüÂâ£„Å™Âèñ„ÇäÁµÑ„ÅøÂßøÂã¢„ÇíÁ§∫„Åô
- „ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆË™≤È°åËß£Ê±∫„Å´ÁÑ¶ÁÇπ

„ÄêË≥™Âïè„ÅÆ„Éù„Ç§„É≥„Éà„Äë
- ÊõñÊòß„Å™ÈÉ®ÂàÜ„ÅÆÊòéÁ¢∫Âåñ
- ÊàêÊûúÁâ©„ÅÆÂÖ∑‰ΩìÁöÑ„Å™Ë¶ÅÊ±Ç‰ªïÊßò
- Á¥çÊúü„ÇÑ„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥ÊñπÊ≥ï
- ÊÉ≥ÂÆö„Åï„Çå„ÇãË™≤È°å„ÇÑ„É™„Çπ„ÇØ„ÅÆÁ¢∫Ë™ç
- ÊàêÂäüÂü∫Ê∫ñ„ÅÆÊòéÁ¢∫Âåñ

„ÄêÂá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Äë
Êå®Êã∂Êñá:
<Êå®Êã∂Êñá„Çí„Åì„Åì„Å´>

Ë≥™Âïè:
1. <Ë≥™Âïè1>
2. <Ë≥™Âïè2>
3. <Ë≥™Âïè3>
4. <Ë≥™Âïè4>
5. <Ë≥™Âïè5>`;

    try {
        const res = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: '„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™„Éï„É™„Éº„É©„É≥„Çµ„Éº„Åß„ÄÅ„ÇØ„É©„Ç¶„Éâ„ÉØ„Éº„ÇØ„ÇπÊ°à‰ª∂„Å∏„ÅÆÂäπÊûúÁöÑ„Å™ÊèêÊ°àÊñá‰ΩúÊàê„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆ‰ø°È†º„ÇíÂæó„Å¶„ÄÅÊ°à‰ª∂„ÇíÂèóÊ≥®„Åô„Çã„Åü„ÇÅ„ÅÆÊà¶Áï•ÁöÑ„Å™„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥„Å´Èï∑„Åë„Å¶„ÅÑ„Åæ„Åô„ÄÇ' },
                { role: 'user', content: prompt }
            ],
            max_tokens: 800,
            temperature: 0.3,
        });

        const text = res.choices[0]?.message?.content || '';

        // Êå®Êã∂Êñá„Å®Ë≥™Âïè„ÇíÂàÜÈõ¢
        const greetingMatch = text.match(/Êå®Êã∂Êñá[:Ôºö]\s*([\s\S]*?)(?=Ë≥™Âïè[:Ôºö]|$)/);
        const questionsMatch = text.match(/Ë≥™Âïè[:Ôºö]\s*([\s\S]*)/);

        const greeting = greetingMatch?.[1]?.trim() || '';
        const questions = questionsMatch?.[1]?.trim() || '';

        return { greeting, questions };
    } catch (e) {
        console.error(`‚ùå ÊèêÊ°àÊñáÁîüÊàê„Ç®„É©„Éº (${job.jobId}):`, e);
        return { greeting: '', questions: '' };
    }
}

// GPT„Åß„Çπ„Ç≠„É´ÈÅ©ÊÄß„ÇíË©ï‰æ°„Åô„ÇãÈñ¢Êï∞
async function analyzeSkillFit(job: AnalysisResult, originalJob: any): Promise<{ score: number; analysis: string }> {
    const prompt = `‰ª•‰∏ã„ÅÆ„ÇØ„É©„Ç¶„Éâ„ÉØ„Éº„ÇØ„ÇπÊ°à‰ª∂„Çí„ÄÅÈ´ò„Çπ„Ç≠„É´Web„Ç®„É≥„Ç∏„Éã„Ç¢„ÅÆË¶ñÁÇπ„ÅßË©ï‰æ°„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ

„Äê‰æùÈ†ºËÄÖ„ÅÆ„Çπ„Ç≠„É´„Éó„É≠„Éï„Ç£„Éº„É´„Äë
- È´ò„Çπ„Ç≠„É´Web„Ç®„É≥„Ç∏„Éã„Ç¢Ôºà„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éª„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ‰∏°ÊñπÔºâ
- „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Éª„Ç∑„Çπ„ÉÜ„É†ÈñãÁô∫„ÉªAPIÈÄ£Êê∫„ÅåÂæóÊÑè
- „Éá„Éº„Çø„Éô„Éº„ÇπË®≠Ë®à„Éª„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊúÄÈÅ©Âåñ„Å™„Å©„ÅÆÊäÄË°ìÂäõÈ´ò„ÅÑ
- „Éá„Ç∂„Ç§„É≥„Çπ„Ç≠„É´„ÅØ‰Ωé„ÅÑÔºà„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØ„Éá„Ç∂„Ç§„É≥„ÉªUI/UX„Éá„Ç∂„Ç§„É≥„ÅØËã¶ÊâãÔºâ
- CSS„Çπ„Çø„Ç§„É™„É≥„Ç∞Á®ãÂ∫¶„Å™„ÇâÂØæÂøúÂèØËÉΩ

„ÄêÊ°à‰ª∂ÊÉÖÂ†±„Äë
„Çø„Ç§„Éà„É´: ${job.title}
Ë©≥Á¥∞Ë™¨Êòé: ${originalJob?.detailedDescription || 'Ë©≥Á¥∞‰∏çÊòé'}
„Ç´„ÉÜ„Ç¥„É™: ${job.category}
Èõ£ÊòìÂ∫¶: ${job.Èõ£ÊòìÂ∫¶}

„ÄêË©ï‰æ°Âü∫Ê∫ñ„Äë
„Çπ„Ç≠„É´ÈÅ©ÊÄß„Çπ„Ç≥„Ç¢Ôºà0-10ÁÇπÔºâ:
- 10ÁÇπ: ÊäÄË°ìÂäõ„ÇíÊúÄÂ§ßÈôêÊ¥ª„Åã„Åõ„ÇãÊ°à‰ª∂Ôºà„Ç∑„Çπ„ÉÜ„É†ÈñãÁô∫„ÄÅAPIÈÄ£Êê∫„ÄÅ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊîπÂñÑÁ≠âÔºâ
- 8-9ÁÇπ: ÊäÄË°ì„Çπ„Ç≠„É´„ÅåÈáçË¶Å„Å™Ê°à‰ª∂ÔºàWordPress„Ç´„Çπ„Çø„Éû„Ç§„Ç∫„ÄÅECÊ©üËÉΩÈñãÁô∫Á≠âÔºâ
- 6-7ÁÇπ: ÊäÄË°ì„Å®„Éá„Ç∂„Ç§„É≥„ÅåÂçä„ÄÖÔºàÊó¢Â≠ò„Çµ„Ç§„Éà‰øÆÊ≠£„ÄÅÁ∞°Âçò„Å™„Çπ„Çø„Ç§„É™„É≥„Ç∞Á≠âÔºâ
- 4-5ÁÇπ: „Éá„Ç∂„Ç§„É≥Ë¶ÅÁ¥†„ÅåÂ§ö„ÅÑÔºà„É¨„Ç§„Ç¢„Ç¶„Éà‰ΩúÊàê„ÄÅ„Éì„Ç∏„É•„Ç¢„É´ÈáçË¶ñÁ≠âÔºâ
- 1-3ÁÇπ: Á¥îÁ≤ã„Å™„Éá„Ç∂„Ç§„É≥Ê°à‰ª∂Ôºà„Ç∞„É©„Éï„Ç£„ÉÉ„ÇØÂà∂‰Ωú„ÄÅUI/UX„Éá„Ç∂„Ç§„É≥Á≠âÔºâ
- 0ÁÇπ: ÂÆåÂÖ®„Å´„Çπ„Ç≠„É´Â§ñÔºà„Ç§„É©„Çπ„ÉàÂà∂‰Ωú„ÄÅÂãïÁîªÁ∑®ÈõÜÁ≠âÔºâ

„ÄêÂá∫Âäõ„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Äë
„Çπ„Ç≥„Ç¢: <0-10„ÅÆÊï∞ÂÄ§>
ÂàÜÊûê: <„Å™„Åú„Åù„ÅÆ„Çπ„Ç≥„Ç¢„Å™„ÅÆ„Åã„ÄÅÊäÄË°ìÁöÑ„Å™Ë¶≥ÁÇπ„Åß„ÅÆË©ï‰æ°ÁêÜÁî±„Çí2-3Ë°å„Åß>`;

    try {
        const res = await openai.chat.completions.create({
            model: 'gpt-4o',
            messages: [
                { role: 'system', content: '„ÅÇ„Å™„Åü„ÅØÊäÄË°ì‰∫∫Êùê„ÅÆ„Çπ„Ç≠„É´„Éû„ÉÉ„ÉÅ„É≥„Ç∞Â∞ÇÈñÄÂÆ∂„Åß„ÄÅWeb„Ç®„É≥„Ç∏„Éã„Ç¢„ÅÆÊäÄË°ìÂäõ„Å®Ê°à‰ª∂Ë¶Å‰ª∂„ÇíÊ≠£Á¢∫„Å´Ë©ï‰æ°„Åß„Åç„Åæ„Åô„ÄÇ„Éá„Ç∂„Ç§„É≥„Çπ„Ç≠„É´„ÅÆÊúâÁÑ°„ÇíËÄÉÊÖÆ„Åó„ÅüÂÆüÁî®ÁöÑ„Å™Ë©ï‰æ°„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ' },
                { role: 'user', content: prompt }
            ],
            max_tokens: 300,
            temperature: 0.2,
        });

        const text = res.choices[0]?.message?.content || '';

        // „Çπ„Ç≥„Ç¢„Å®ÂàÜÊûê„ÇíÂàÜÈõ¢
        const scoreMatch = text.match(/„Çπ„Ç≥„Ç¢[:Ôºö]\s*([0-9.]+)/);
        const analysisMatch = text.match(/ÂàÜÊûê[:Ôºö]\s*([\s\S]*)/);

        const score = scoreMatch?.[1] ? parseFloat(scoreMatch[1]) : 5;
        const analysis = analysisMatch?.[1]?.trim() || '';

        return { score: Math.max(0, Math.min(10, score)), analysis };
    } catch (e) {
        console.error(`‚ùå „Çπ„Ç≠„É´ÈÅ©ÊÄßÂàÜÊûê„Ç®„É©„Éº (${job.jobId}):`, e);
        return { score: 5, analysis: 'ÂàÜÊûê„Ç®„É©„Éº' };
    }
}

// ÂÆüË°å
const minHourlyRateArg = process.argv[2] ? parseInt(process.argv[2], 10) : 3000;
(async () => {
    await calculateRecommendationScores(minHourlyRateArg);
})(); 